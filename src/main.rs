use chrono::Utc;
use ndarray::{arr2, Array, Array2, Axis};
use once_cell::sync::Lazy;
use std::fs::write;
use std::time::{Duration, Instant};
use std::vec;
use ventilator_dist::{MolStructure, CRO};

// sample data
static D: Lazy<[Array2<f64>; 3]> = Lazy::new(|| {
    [
        arr2(&[
            [24.4, 2212.3, 1401.4, 1493.8],
            [2206.9, 48.5, 1058., 766.7],
            [1384.8, 1052.5, 29.6, 114.2],
            [1442.4, 1191.8, 200.2, 113.8],
            [14.8, 2217.5, 1406.6, 1499.],
            [84., 2195., 1409.9, 1502.2],
            [2198.5, 42.1, 1069.5, 752.6],
        ]),
        arr2(&[
            [6123.0, 3711.51, 3951.29, 3726.8, 3731.9, 2600.0],
            [4742.0, 4660.0, 5575.0, 3811.89, 5740.0, 3280.0],
            [4788.0, 4455.0, 4788.0, 4005.0, 4365.0, 3160.0],
            [4876.0, 4543.0, 4875.0, 5867.0, 4440.0, 3248.0],
        ]),
        Array::from_shape_vec(
            (6, 36),
            vec![
                2282.0, 1355.2, 2991.0, 2766.4, 1751.7, 1643.2, 1117.2, 159.9, 1408.9, 577.8,
                539.7, 1643.2, 1740.5, 2160.8, 1706.3, 989.7, 1678.2, 2356.9, 948.0, 776.6, 6.9,
                3255.1, 2851.4, 3222.0, 3122.8, 1667.0, 1353.6, 1706.9, 1140.2, 2398.5, 1342.7,
                715.9, 3297.8, 1379.1, 1652.2, 2033.7, 1639.0, 1019.1, 3215.1, 2990.5, 2071.7,
                2399.5, 1351.0, 1154.4, 2155.8, 616.4, 1534.1, 2399.5, 2496.8, 2965.5, 1940.1,
                35.4, 717.8, 3113.2, 625.0, 1420.5, 1003.8, 3479.2, 3075.5, 3446.1, 3346.8, 1451.3,
                393.2, 2463.2, 2125.5, 2622.6, 338.9, 546.7, 3521.9, 1909.2, 2351.0, 1897.1,
                1371.0, 822.2, 2930.3, 2705.6, 2142.4, 2470.1, 1187.1, 1474.1, 2226.4, 936.1,
                1853.8, 2470.2, 2567.5, 3036.2, 1634.5, 335.3, 702.4, 3183.9, 863.0, 1491.2,
                1323.5, 3194.3, 2790.6, 3161.3, 3062.0, 1254.4, 143.8, 2533.9, 2196.2, 2337.7,
                18.6, 642.8, 3237.0, 1979.9, 2421.6, 1700.2, 2484.0, 1817.6, 2150.7, 1926.0,
                1071.4, 259.0, 1229.6, 1241.1, 20.9, 1836.5, 907.2, 259.0, 356.3, 825.0, 1269.8,
                2163.3, 2845.7, 972.7, 2053.0, 776.3, 1390.4, 2414.7, 2011.0, 2381.7, 2282.4,
                1719.1, 2356.1, 322.7, 256.9, 1558.2, 2196.1, 1571.8, 2457.5, 540.4, 259.1, 1520.3,
                1660.0, 643.5, 2696.4, 2471.8, 1553.0, 1880.7, 832.3, 863.6, 1637.0, 656.0, 1243.4,
                1880.8, 1978.1, 2446.8, 1421.4, 553.8, 1236.2, 2594.5, 970.0, 901.8, 713.0, 2960.5,
                2556.8, 2927.4, 2828.1, 1075.7, 750.5, 1944.5, 1606.8, 2103.9, 640.4, 26.5, 3003.2,
                1390.5, 1832.2, 1521.4, 1307.0, 889.6, 1260.6, 1035.9, 551.0, 1776.1, 924.4,
                2073.4, 1532.4, 2206.3, 2040.2, 1776.1, 1873.5, 2342.1, 412.0, 1888.7, 2398.4,
                2489.8, 2151.0, 1379.3, 2032.2, 1524.6, 1120.9, 1616.7, 1392.3, 448.9, 1839.8,
                1839.8, 1553.3, 670.7, 1679.8, 1503.6, 1692.5, 990.3, 1727.6, 15.3,
            ],
        )
        .unwrap(),
    ]
});

static C: Lazy<[Vec<f64>; 3]> = Lazy::new(|| {
    [
        vec![125.0, 78.0, 39.0],
        vec![181.0, 116.0, 24.0],
        vec![125.0, 78.0, 39.0],
    ]
});
static L: Lazy<[Vec<f64>; 3]> = Lazy::new(|| {
    [
        vec![2.0, 1.5, 1.0],
        vec![3.0, 2.5, 2.0],
        vec![2.0, 1.5, 1.0],
    ]
});
static UL: Lazy<[Vec<f64>; 3]> = Lazy::new(|| {
    [
        vec![1.5, 1.0, 0.5],
        vec![2.5, 2.0, 1.5],
        vec![1.5, 1.0, 0.5],
    ]
});
static S: Lazy<[Vec<f64>; 3]> = Lazy::new(|| {
    [
        vec![50.0, 60.0, 70.0],
        vec![600.0, 700.0, 800.0],
        vec![50.0, 60.0, 70.0],
    ]
});

fn tdt(m: &MolStructure) -> f64 {
    let mut res: f64 = 0.0;
    for x in 0..3 {
        let q = &m.w[x];
        for z in 0..q.shape()[2] {
            let t: Array2<f64> = &D[x] / S[x][z] + L[x][z] + UL[x][z];
            let q_z = q.index_axis(Axis(2), z);
            let arr = q_z.mapv(|e: i32| ((e as f64) / C[x][z]).ceil());
            res += (&arr * &t).sum();
        }
    }
    res
}
fn main() {
    std::env::set_var("RUST_BACKTRACE", "1");
    let demand: i32 = 6785;
    let graph_dims = [(7, 4, 3), (4, 6, 3), (6, 36, 3)];
    let mut cro = CRO::new(100, tdt, graph_dims, demand);
    let now = Instant::now();
    let limit = Duration::from_secs(300);
    let mut min_time: Vec<f64> = Vec::<f64>::new();
    min_time.push(cro.best_pe);
    // run main cycle here
    while now.elapsed() < limit {
        cro.main_cycle();
        min_time.push(cro.best_pe);
    }
    let data: Vec<String> = min_time.iter().map(|x| x.to_string()).collect();
    let tmstamp = Utc::now().to_rfc3339();
    let fp1 = format!("{}{}{}", &"./logs/", &tmstamp, &".log");
    write(fp1, data.join(",")).expect("Failed to write logs");
    let fp2 = format!("{}{}{}", &"./soln/intermediate/", &tmstamp, &".vec");
    let mut best_w: String = String::new();
    for i in 0..2 {
        best_w.push_str(&cro.best_soln.w[i].to_string());
        best_w.push_str("\n+\n");
    }
    best_w.push_str(&format!("{:#}",cro.best_soln.w[2]));
    write(fp2, best_w).expect("Failed to write solution vector");
}
